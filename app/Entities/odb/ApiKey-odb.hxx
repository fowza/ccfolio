// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef API_KEY_ODB_HXX
#define API_KEY_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "ApiKey.h"

#include <cstddef>
#include <memory>
#include <utility>

#include <odb/callback.hxx>
#include <odb/container-traits.hxx>
#include <odb/core.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/traits.hxx>
#include <odb/wrapper-traits.hxx>

#include <odb/details/shared-ptr.hxx>
#include <odb/details/unused.hxx>

namespace odb
{
// ApiKey
//
template <>
struct class_traits<::ApiKey>
{
    static const class_kind kind = class_object;
};

template <>
class access::object_traits<::ApiKey>
{
public:
    typedef ::ApiKey object_type;
    typedef ::std::shared_ptr<::ApiKey> pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type id(const object_type &);

    typedef no_op_pointer_cache_traits<pointer_type> pointer_cache_traits;

    typedef no_op_reference_cache_traits<object_type> reference_cache_traits;

    static void callback(database &, object_type &, callback_event);

    static void callback(database &, const object_type &, callback_event);
};
} // namespace odb

#include <odb/details/buffer.hxx>

#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>
#include <odb/pgsql/version.hxx>

namespace odb
{
// ApiKey
//
template <typename A>
struct query_columns<::ApiKey, id_pgsql, A>
{
    // id
    //
    typedef pgsql::query_column<pgsql::value_traits<long unsigned int, pgsql::id_bigint>::query_type, pgsql::id_bigint>
        id_type_;

    static const id_type_ id;

    // hash
    //
    typedef pgsql::query_column<pgsql::value_traits<::std::string, pgsql::id_string>::query_type, pgsql::id_string>
        hash_type_;

    static const hash_type_ hash;

    // description
    //
    typedef pgsql::query_column<pgsql::value_traits<::std::string, pgsql::id_string>::query_type, pgsql::id_string>
        description_type_;

    static const description_type_ description;

    // status
    //
    typedef pgsql::query_column<pgsql::value_traits<::std::string, pgsql::id_string>::query_type, pgsql::id_string>
        status_type_;

    static const status_type_ status;

    // user_id
    //
    typedef pgsql::query_column<pgsql::value_traits<long unsigned int, pgsql::id_bigint>::query_type, pgsql::id_bigint>
        user_id_type_;

    static const user_id_type_ user_id;

    // expires_at
    //
    typedef pgsql::query_column<
        pgsql::value_traits<::std::chrono::system_clock::time_point, pgsql::id_timestamp>::query_type,
        pgsql::id_timestamp>
        expires_at_type_;

    static const expires_at_type_ expires_at;

    // created_at
    //
    typedef pgsql::query_column<
        pgsql::value_traits<::std::chrono::system_clock::time_point, pgsql::id_timestamp>::query_type,
        pgsql::id_timestamp>
        created_at_type_;

    static const created_at_type_ created_at;

    // updated_at
    //
    typedef pgsql::query_column<
        pgsql::value_traits<::std::chrono::system_clock::time_point, pgsql::id_timestamp>::query_type,
        pgsql::id_timestamp>
        updated_at_type_;

    static const updated_at_type_ updated_at;
};

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::id_type_ query_columns<::ApiKey, id_pgsql, A>::id(A::table_name,
                                                                                                       "\"id\"",
                                                                                                       0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::hash_type_ query_columns<::ApiKey, id_pgsql, A>::hash(
    A::table_name,
    "\"hash\"",
    0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::description_type_ query_columns<::ApiKey, id_pgsql, A>::
    description(A::table_name, "\"description\"", 0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::status_type_ query_columns<::ApiKey, id_pgsql, A>::status(
    A::table_name,
    "\"status\"",
    0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::user_id_type_ query_columns<::ApiKey, id_pgsql, A>::user_id(
    A::table_name,
    "\"user_id\"",
    0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::expires_at_type_ query_columns<::ApiKey, id_pgsql, A>::expires_at(
    A::table_name,
    "\"expires_at\"",
    0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::created_at_type_ query_columns<::ApiKey, id_pgsql, A>::created_at(
    A::table_name,
    "\"created_at\"",
    0);

template <typename A>
const typename query_columns<::ApiKey, id_pgsql, A>::updated_at_type_ query_columns<::ApiKey, id_pgsql, A>::updated_at(
    A::table_name,
    "\"updated_at\"",
    0);

template <typename A>
struct pointer_query_columns<::ApiKey, id_pgsql, A> : query_columns<::ApiKey, id_pgsql, A>
{
};

template <>
class access::object_traits_impl<::ApiKey, id_pgsql> : public access::object_traits<::ApiKey>
{
public:
    struct id_image_type
    {
        long long id_value;
        bool id_null;

        std::size_t version;
    };

    struct image_type
    {
        // id_
        //
        long long id_value;
        bool id_null;

        // hash_
        //
        details::buffer hash_value;
        std::size_t hash_size;
        bool hash_null;

        // description_
        //
        details::buffer description_value;
        std::size_t description_size;
        bool description_null;

        // status_
        //
        details::buffer status_value;
        std::size_t status_size;
        bool status_null;

        // user_id_
        //
        long long user_id_value;
        bool user_id_null;

        // expires_at_
        //
        long long expires_at_value;
        bool expires_at_null;

        // created_at_
        //
        long long created_at_value;
        bool created_at_null;

        // updated_at_
        //
        long long updated_at_value;
        bool updated_at_null;

        std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type id(const id_image_type &);

    static id_type id(const image_type &);

    static bool grow(image_type &, bool *);

    static void bind(pgsql::bind *, image_type &, pgsql::statement_kind);

    static void bind(pgsql::bind *, id_image_type &);

    static bool init(image_type &, const object_type &, pgsql::statement_kind);

    static void init(object_type &, const image_type &, database *);

    static void init(id_image_type &, const id_type &);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void persist(database &, object_type &);

    static pointer_type find(database &, const id_type &);

    static bool find(database &, const id_type &, object_type &);

    static bool reload(database &, object_type &);

    static void update(database &, const object_type &);

    static void erase(database &, const id_type &);

    static void erase(database &, const object_type &);

    static result<object_type> query(database &, const query_base_type &);

    static unsigned long long erase_query(database &, const query_base_type &);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

public:
    static bool find_(statements_type &, const id_type *);

    static void load_(statements_type &, object_type &, bool reload);
};

template <>
class access::object_traits_impl<::ApiKey, id_common> : public access::object_traits_impl<::ApiKey, id_pgsql>
{
};

// ApiKey
//
} // namespace odb

#include "ApiKey-odb.ixx"

#include <odb/post.hxx>

#endif // API_KEY_ODB_HXX
